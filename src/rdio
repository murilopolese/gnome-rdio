#!/usr/bin/gjs

const Lang = imports.lang;
const GLib = imports.gi.GLib;
const Gtk = imports.gi.Gtk;
const Gdk = imports.gi.Gdk;
const Gio = imports.gi.Gio;
const WebKit = imports.gi.WebKit;
const Soup = imports.gi.Soup;

// This folder should be created on app install. The expected files are
// cookies,txt and rdio-icon.png
const RDIO_USER_DATA = GLib.get_user_data_dir() + '/rdio';
const RDIO_URI = 'https://rdio.com';

const Application = new Lang.Class({
    Name: 'Application',
    _init: function() {
        this.application = new Gtk.Application();
        this.application.connect('activate', Lang.bind(this, this._onActivate));
        this.application.connect('startup', Lang.bind(this, this._onStartup));
    },
    _buildUI: function() {
        this._createWindow();
        this._bindAccelerators();
        this._createWebView();
        this._createCookies();
        this._createStatusIcon();
        this._createMenus();
    },
    _createWindow: function() {
        // Application main window
        this._window = new Gtk.ApplicationWindow({ 
            application: this.application,
            window_position: Gtk.WindowPosition.CENTER,
            title: "Rdio" 
        });
        this._window.set_default_size(800, 600);
        // Prevent window from be destroyed when clicked on close button 
        this._window.connect('delete-event', 
            Lang.bind(this, this._toggleWindowVisibility));
    },
    _createWebView: function() {
        // Scrollable container
        let sw = new Gtk.ScrolledWindow({});
        this._window.add(sw);
        // Web view
        this._webView = new WebKit.WebView();
        this._webView.load_uri(RDIO_URI);
        sw.add(this._webView);
    },
    _bindAccelerators: function() {
        let pauseAction = new Gio.SimpleAction({name: 'pause'});
        let nextAction = new Gio.SimpleAction({name: 'next'});
        let prevAction = new Gio.SimpleAction({name: 'prev'});

        pauseAction.connect('activate', Lang.bind(this, function() {
            this._eventDispatcher('.play_pause');
        }));
        nextAction.connect('activate', Lang.bind(this, function() {
            this._eventDispatcher('.next');
        }));
        prevAction.connect('activate', Lang.bind(this, function() {
            this._eventDispatcher('.prev');
        }));

        this.application.add_action(pauseAction);
        this.application.add_action(nextAction);
        this.application.add_action(prevAction);

        this.application.add_accelerator('<alt>x', 'app.pause', null);
        this.application.add_accelerator('<alt>c', 'app.next', null);
        this.application.add_accelerator('<alt>z', 'app.prev', null);
    },
    _eventDispatcher: function(selector) {
        let js ="var evt = document.createEvent('MouseEvents');"
        js +="evt.initMouseEvent('click', true, false,  document, 0, 0, 0, 0, 0, false, false, false, false, 0, null);"
        js +="document.querySelector('"+selector+"').dispatchEvent(evt);"
        this._webView.execute_script(js);
    },
    _createCookies: function() {
        // Cookies persistance
        let session = WebKit.get_default_session();
        let cookies = new Soup.CookieJarText({
            filename: RDIO_USER_DATA + '/cookies.txt'
        });
        cookies.set_accept_policy(Soup.CookieJarAcceptPolicy.ALWAYS);
        cookies.attach(session);
    },
    _createStatusIcon: function() {
        // System tray icon
        let tray = new Gtk.StatusIcon();
        tray.file = RDIO_USER_DATA + '/rdio-icon.png';
        tray.connect('activate', Lang.bind(this, this._toggleWindowVisibility));
        this.tray = tray;
    },
    _createMenus: function() {
        let menu = new Gio.Menu();
        menu.append('Hide', 'app.hide');
        menu.append('Quit', 'app.quit');
        menu.append('Pause', 'app.pause');
        this.application.set_app_menu(menu);

        let hideAction = new Gio.SimpleAction({name: 'hide'});
        let quitAction = new Gio.SimpleAction({name: 'quit'});

        hideAction.connect('activate', 
            Lang.bind(this._window, this._window.hide));
        quitAction.connect('activate', 
            Lang.bind(this._window, this._window.destroy));

        this.application.add_action(hideAction);
        this.application.add_action(quitAction);
    },
    _toggleWindowVisibility: function() {
        if(this._window.is_active) {
            this._window.hide();
        } else {
            this._window.show_all();
            this._window.present();
        }
        return true;
    },
    _onActivate: function() {
        this._window.show_all();
    },
    _onStartup: function() {
        this._buildUI();
    },
});

//run the application
let app = new Application();
app.application.run(ARGV);